# docker-compose.dev.yml
# 說明：專為本地開發設計，支援程式碼熱重載 (Hot-Reloading)。
# 執行：docker-compose -f docker-compose.dev.yml up --build -d

services:
  # -------------------------------------------------
  #  1. 基礎設施層 (與生產環境一致)
  # -------------------------------------------------
  postgres:
    image: postgres:15-alpine
    container_name: dev_postgres_db
    environment:
      - POSTGRES_USER=${POSTGRES_ADMIN_USER}
      - POSTGRES_PASSWORD=${POSTGRES_ADMIN_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - dev_pgdata:/var/lib/postgresql/data
      - ./infra/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "15432:5432"
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD-SHELL", "pg_isready -U ${POSTGRES_ADMIN_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: dev_redis_cache
    volumes:
      - dev_redisdata:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.12-management-alpine
    container_name: dev_rabbitmq_queue
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - dev_rabbitmq_data:/var/lib/rabbitmq
    ports:
      - "15673:5672" # 將主機埠改為 15673，避開 Windows 預留區
      - "15672:15672"
    restart: unless-stopped

  etcd:
    container_name: dev_milvus-etcd
    image: quay.io/coreos/etcd:v3.6.1
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - dev_etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd

  minio:
    container_name: dev_milvus-minio
    image: quay.io/minio/minio:RELEASE.2025-05-24T17-08-30Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "9001:9001"
      - "9000:9000"
    volumes:
      - dev_minio:/data
    command: minio server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus:
    image: milvusdb/milvus:v2.5.14
    command: ["milvus", "run", "standalone"]
    container_name: dev_milvus_vector_db
    depends_on:
      - etcd
      - minio
    environment:
      - ETCD_ENDPOINTS=etcd:2379
      - MINIO_ADDRESS=minio:9000
    volumes:
      - dev_milvusdata:/milvus/data
    ports:
      - "19530:19530"
      - "9091:9091"
    healthcheck:
      test: ["CMD", "curl", "-sf", "http://localhost:9091/healthz"]
      interval: 10s
      timeout: 5s
      retries: 12

  mongodb:
    image: mongo:latest
    container_name: dev_mongodb
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
    ports:
      - "27017:27017"
    volumes:
      - dev_mongodb_data:/data/db
    restart: unless-stopped
    healthcheck:
      test: |
        mongosh --host localhost:27017 --eval "db.adminCommand('ping')" --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  # -------------------------------------------------
  #  2. 應用程式層 (開發模式)
  # -------------------------------------------------
  web-app:
    build:
      context: ./services/web-app
      dockerfile: Dockerfile
      args:
        - LIFF_CHANNEL_ID=${LIFF_CHANNEL_ID}
        - LINE_CHANNEL_SECRET=${LINE_CHANNEL_SECRET}
        - LINE_CHANNEL_ACCESS_TOKEN=${LINE_CHANNEL_ACCESS_TOKEN}
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
    container_name: dev_web_app_service
    entrypoint: >
      sh -lc "flask db upgrade heads && flask run --host=0.0.0.0 --port=5000 --debug"
    ports:
      - "5000:5000"
    env_file:
      - .env
    volumes:
      # 掛載本地程式碼到容器中，實現熱重載
      - ./services/web-app:/usr/src/app
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_ADMIN_USER}:${POSTGRES_ADMIN_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - RABBITMQ_NOTIFICATION_QUEUE=notifications_queue
      - RABBITMQ_QUEUE=task_queue
      - PYTHONUNBUFFERED=1
      - MILVUS_URI=http://milvus:19530
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      milvus:
        condition: service_healthy

  # -------------------------------------------------
  #  3. AI 服務層 (Production Mode)
  # -------------------------------------------------
  ai-worker:
    build:
      context: ./services/ai-worker
      dockerfile: Dockerfile
    container_name: dev_ai_worker_service
    env_file:
      - .env
    volumes:
      # 掛載本地程式碼，若有修改可重啟容器生效
      - ./services/ai-worker:/app
      # 啟用 Hugging Face 模型快取，避免重複下載
      - dev_hf_cache:/root/.cache/huggingface
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_ADMIN_USER}:${POSTGRES_ADMIN_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - REDIS_URL=redis://redis:6379
      - MONGO_URL=mongodb://${MONGO_ROOT_USER}:${MONGO_ROOT_PASSWORD}@mongodb:27017/
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_QUEUE=task_queue
      - RABBITMQ_NOTIFICATION_QUEUE=notifications_queue
      - MINIO_BUCKET_NAME=audio-bucket
      - VOICE_BUCKET=audio-uploads
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MILVUS_URI=http://milvus:19530
      # 禁用 CrewAI 遙測功能
      - OTEL_SDK_DISABLED=true
      - CREWAI_TELEMETRY_OPT_OUT=true

      # HF 模型快取位置（與上方卷一致）
      - HF_HOME=/root/.cache/huggingface
      - TRANSFORMERS_CACHE=/root/.cache/huggingface
      # GPU 相關環境變數
      - CUDA_VISIBLE_DEVICES=0
      - NVIDIA_VISIBLE_DEVICES=all
      - NVIDIA_DRIVER_CAPABILITIES=compute,utility
    # 啟用 GPU 支援 (Docker Desktop 相容版本)
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    depends_on:
      rabbitmq:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      minio:
        condition: service_started
      milvus:
        condition: service_healthy

  # -------------------------------------------------
  #  4. 邊緣網路層 (Edge Layer)
  # -------------------------------------------------
  nginx:
    build:
      context: .
      dockerfile: ./infra/nginx/Dockerfile.dev
      # dockerfile: ./infra/nginx/Dockerfile.prod
    container_name: dev_nginx_load_balancer
    ports:
      - "80:80"
      - "443:443"
    volumes:
      # 掛載開發專用設定檔
      - ./infra/nginx/config/development.conf:/etc/nginx/conf.d/default.conf
      # - ./data/certbot/conf:/etc/letsencrypt
      # - ./data/certbot/www:/var/www/certbot
    env_file:
      - .env
    depends_on:
      - web-app
      - minio
    restart: unless-stopped

# -------------------------------------------------
#  5. 具名磁碟區 (開發環境)
# -------------------------------------------------
volumes:
  dev_pgdata:
  dev_redisdata:
  dev_milvusdata:
  dev_minio:
  dev_etcd:
  dev_mongodb_data:
  dev_rabbitmq_data:
  dev_hf_cache:
